generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  systemRole  String   @default("USER") // ADMIN, MANAGER, USER
  jobRoleId   Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobRole      Role?           @relation(fields: [jobRoleId], references: [id])
  projectRoles ProjectRole[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users        User[]
  templates    Template[]
  projectRoles ProjectRole[]

  @@map("roles")
}

model Template {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  roleId      Int
  autoAssign  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  role          Role           @relation(fields: [roleId], references: [id])
  templateTasks TemplateTask[]

  @@map("templates")
}

model TemplateTask {
  id          Int      @id @default(autoincrement())
  templateId  Int
  description String
  offsetDays  Int      @default(0)
  isRecurring Boolean  @default(false)
  isCritical  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  template     Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  projectTasks ProjectTask[]

  @@map("template_tasks")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectRoles ProjectRole[]
  projectTasks ProjectTask[]

  @@map("projects")
}

model ProjectRole {
  id        Int      @id @default(autoincrement())
  projectId Int
  roleId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role         Role          @relation(fields: [roleId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  projectTasks ProjectTask[]

  @@unique([projectId, roleId])
  @@map("project_roles")
}

model ProjectTask {
  id             Int       @id @default(autoincrement())
  projectRoleId  Int
  templateTaskId Int?
  description    String
  status         String    @default("TODO") // TODO, IN_PROGRESS, DONE
  dueDate        DateTime
  completedAt    DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  projectRole  ProjectRole   @relation(fields: [projectRoleId], references: [id], onDelete: Cascade)
  templateTask TemplateTask? @relation(fields: [templateTaskId], references: [id])

  @@map("project_tasks")
}
